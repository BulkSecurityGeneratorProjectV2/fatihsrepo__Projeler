

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import static java.lang.Math.abs;
import static java.lang.Math.pow;
import static java.lang.Math.sqrt;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Fatih
 */
public class Indirgeme extends javax.swing.JFrame {

    /**
     * Creates new form Indirgeme
     */
    public Indirgeme() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("sunucu");
        setLocation(new java.awt.Point(20, 20));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setBackground(new java.awt.Color(153, 153, 153));
        jScrollPane2.setForeground(new java.awt.Color(255, 255, 255));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(153, 153, 153));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 700, 270));

        jPanel1.setBackground(new java.awt.Color(122, 72, 221));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("MS UI Gothic", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SUNUCU - İNDİRGEME");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, 50));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ikonlar/if_button-cross_blue_68681.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(636, 11, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ikonlar/sunucu icon.png"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 70, 60));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 70));

        jPanel2.setBackground(new java.awt.Color(54, 33, 89));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SUNUCUYU BAŞLAT");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ikonlar/start.png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 60, 58));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 700, 110));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        
        //Serveri başlatmadan önce içeride kalan noktalar dosyasını programda karışıklık olmaması için siliyorum
        File file=new File("C:\\Users\\Fatih\\Documents\\NetBeansProjects\\Gezinge_Sunucu_Sorgu\\iceride_kalan_noktalar.txt");
        file.delete();
        
        try {
            Islem();
        } catch (IOException ex) {
            Logger.getLogger(Indirgeme.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Indirgeme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Indirgeme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Indirgeme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Indirgeme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Indirgeme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Indirgeme indirgeme=new Indirgeme();
                indirgeme.setVisible(true);
                //indirgeme.setLocationRelativeTo(null);
            }
        });
    }

    
static int ham_veri_sayisi;
static int k; 
static double[][] points;   
static StringBuilder sb1=new StringBuilder();
static StringBuilder sb2=new StringBuilder(); 
    
void Islem() throws IOException, ClassNotFoundException{
    
	ServerSocket serverSocket = null;
        try {
		serverSocket = new ServerSocket(5555);
        } catch (IOException e) {
		System.err.println("I/O exception: " + e.getMessage());
		System.exit(1);
	}
	
        jTextArea2.append("Sunucu baslatildi. Baglanti bekleniyor...");
        System.out.println("Sunucu baslatildi. Baglanti bekleniyor...");
	jTextArea2.update(jTextArea2.getGraphics());
        
        Socket clientSocket = null;
	try {
		clientSocket = serverSocket.accept(); // bağlantı bekleniyor
	} catch (IOException e) {
		System.err.println("Accept failed.");
		System.exit(1);
	}
 
        ObjectOutputStream output=new ObjectOutputStream(clientSocket.getOutputStream());
        output.flush();
        ObjectInputStream input=new ObjectInputStream(clientSocket.getInputStream());
	System.out.println(clientSocket.getLocalAddress() + " baglandi.");
        jTextArea2.append("\n"+ clientSocket.getLocalAddress() + " baglandi.");
	jTextArea2.update(jTextArea2.getGraphics());
        
 
	jTextArea2.append("\n"+ "İstemciden istem bekleniyor...");
	System.out.println("İstemciden istem bekleniyor...");
	jTextArea2.update(jTextArea2.getGraphics());
        

	String Ham_Veri=input.readObject().toString();						      
	ham_veri_sayisi=Integer.parseInt(input.readObject().toString());
        //System.out.println(Ham_Veri);
        //System.out.println(ham_veri_sayisi);
        
        points = new double[ham_veri_sayisi][2];
        
        String[] parcalar=Ham_Veri.split(",");
        int m=0;
        for(int i=0;i<ham_veri_sayisi;i++){
           points[i][0]=Double.parseDouble(parcalar[m]);
           points[i][1]=Double.parseDouble(parcalar[m+1]);
           m=m+2;
        }
            
	//Gelen hamveriyi sorgu servisinin kullanabilmesi için txt ye yazıyoruz
        m=0;
        PrintWriter writer = new PrintWriter("gelen_ham_veri.txt", "UTF-8");
        for(int j=0;j<ham_veri_sayisi;j++){
            writer.println(parcalar[m]+" "+parcalar[m+1]);
            m+=2;
        }
        writer.close();
        
        System.out.println("\n"+ "Ham veri geldi. İndirgeniyor...");
        jTextArea2.append("\n"+ "Ham veri geldi. İndirgeniyor...");
        jTextArea2.update(jTextArea2.getGraphics());
        
        
        
        double[] fpoints;
        RamerDouglasPeuckerFilter rdpf = new RamerDouglasPeuckerFilter(100);
        
        //indirgenen verinin lat kısmı gönderiliyor
        k=0;
        fpoints = rdpf.filter(points);
        

        int uzunluk=fpoints.length;
        output.writeObject(uzunluk);
        
        for (int i = 0; i < fpoints.length; i++){
            //indirgenmis verinin lat kısmı
            output.writeObject(Double.toString(fpoints[i]));
            //lat kısmını sonradan dosyaya yazabilmek için stringbuildere atıyorum
            sb1.append(Double.toString(fpoints[i])+" ");
        }    
           
        
        //indirgenen verinin long kısmı gönderiliyor
        k=1;
        fpoints = rdpf.filter(points);

        
        for (int i = 0; i < fpoints.length; i++){
            //indirgenmis verinin long kısmı
            output.writeObject(Double.toString(fpoints[i]));        
            //long kısmını sonradan dosyaya yazabilmek için stringbuildere atıyorum
            sb2.append(Double.toString(fpoints[i])+" ");       
        }
        
        
        System.out.println("\n"+ "İndirgenmiş veri gönderildi.");
        jTextArea2.append("\n"+ "İndirgenmiş veri gönderildi.");
        jTextArea2.update(jTextArea2.getGraphics());
        
        
        //indirgenen veriyi sorgu servisinin kullanabilmesi için dosyaya yazıyorum.
        PrintWriter writer1 = new PrintWriter("indrigenmis_veri.txt", "UTF-8");
        
        String[] parcalar1=sb1.toString().split(" ");
        String[] parcalar2=sb2.toString().split(" ");
        m=0;
        double indirgenmis_veri_sayisi=parcalar1.length;
        for(int j=0;j<parcalar1.length;j++){
            writer1.println(parcalar1[m]+" "+parcalar2[m]);
            m++;
        }
        writer1.close();   
        
        
        //sorgu servisi için gerekli alan bilgileri geliyor
        String min_lat=input.readObject().toString();
        String min_long=input.readObject().toString();
        String max_lat=input.readObject().toString();
        String max_long=input.readObject().toString();
        
        //Sorgu servisinin kullanabilmesi için bu bilgileri dosyaya yazdırıyorum
        PrintWriter writer2 = new PrintWriter("sinirlar.txt", "UTF-8");
        writer2.print(min_lat+" "+min_long+" "+max_lat+" "+max_long);
        writer2.close();        
        
        
        //Sorgu servisi tarafından içeride kalan noktalar geldiyse alıp istemciye gönderiyorum. aniyede bir kez kontrol ediyorum
        System.out.println("Sorgu servisinden veri bekleniyor...");
        jTextArea2.append("\n"+ "Sorgu servisinden veri bekleniyor...");
        jTextArea2.update(jTextArea2.getGraphics());
        StringBuilder icerideki_noktalar=new StringBuilder();
        File file=new File("C:\\Users\\Fatih\\Documents\\NetBeansProjects\\Gezinge_Sunucu_Sorgu\\iceride_kalan_noktalar.txt");
        for(int k=0;k<10000;k++){
            if(!file.exists()){
                try {
                    TimeUnit.SECONDS.sleep(1);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Indirgeme.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
                break;
        }    
        
        System.out.println("Veri geldi. İstemciye gönderiliyor...");
        jTextArea2.append("\n"+ "Veri geldi. İstemciye gönderiliyor...");
        jTextArea2.update(jTextArea2.getGraphics());
        if(file.exists()){
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            while((line = br.readLine()) != null)
            {   
                String[] parcalar3=line.split(" ");
                if(!parcalar3[0].equals("")){
                    icerideki_noktalar.append(parcalar3[0]+" "+parcalar3[1]+" ");
                }
            
                }
                br.close();
                output.writeObject(icerideki_noktalar.toString());
                //System.out.println(icerideki_noktalar.toString());
            }         
        
        else
           output.writeObject(icerideki_noktalar.toString());
        


        //İndirgeme oranı gönderiliyor.
        double oran= (1-(indirgenmis_veri_sayisi/(double)ham_veri_sayisi))*100;
        output.writeObject(Double.toString(oran));
        System.out.println("İndirgeme oranı gönderildi.");
        jTextArea2.append("\n"+ "İndirgeme oranı gönderildi.");
        jTextArea2.update(jTextArea2.getGraphics());
        


	clientSocket.close();
	serverSocket.close();    
    
} 
    
    
static class RamerDouglasPeuckerFilter
{    
    
private double epsilon;



public double Haversine(double lat1, double lng1, double lat2, double lng2){
    int r = 6371; // dünyanin yaricapi
    double dLat = Math.toRadians(lat2 - lat1);
    double dLon = Math.toRadians(lng2 - lng1);
    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
       Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) 
      * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    double d = r * c;
    return d;    
        
    }
    
public double dik_uzunluk_bul(double lat1, double lng1, double lat2, double lng2, double lat3, double lng3){
        double a= Haversine(lat1,lng1,lat3,lng3);//ilk ve son noktalar
        double b= Haversine(lat1,lng1,lat2,lng2);
        double c= Haversine(lat2,lng2,lat3,lng3);
        
        double cevre=a+b+c;
        double u=cevre/2;
        double alan=Math.sqrt(u*(u-a)*(u-b)*(u-c));
        double dist=(alan*2)/a;
        
    return dist;    
    }





public RamerDouglasPeuckerFilter(double epsilon)
    {
        if (epsilon <= 0)
        {
            throw new IllegalArgumentException("Epsilon sifirdan buyuk olmali.");
        }
        this.epsilon = epsilon;
    }
 
public double[] filter(double[][] data)
    {
        return ramerDouglasPeuckerFunction(data, 0, data.length - 1);
    }
 
public double getEpsilon()
    {
        return epsilon;
    }
 
protected double[] ramerDouglasPeuckerFunction(double[][] points,int startIndex, int endIndex)
    {
        double dmax = 0;
        int idx = 0;

        for (int i = startIndex + 1; i < endIndex; i++)
        {
            double distance = dik_uzunluk_bul
                    (points[startIndex][0],points[startIndex][1]
                    ,points[i][0],points[i][1]
                    ,points[endIndex][0],points[endIndex][1]);
            if (distance > dmax)
            {
                idx = i;
                dmax = distance;
            }
        }
        if (dmax >= epsilon)
        {
            double[] recursiveResult1 = ramerDouglasPeuckerFunction(points,
                    startIndex, idx);
            double[] recursiveResult2 = ramerDouglasPeuckerFunction(points,
                    idx, endIndex);
            double[] result = new double[(recursiveResult1.length - 1)
                    + recursiveResult2.length];
            System.arraycopy(recursiveResult1, 0, result, 0,
                    recursiveResult1.length - 1);
            System.arraycopy(recursiveResult2, 0, result,
                    recursiveResult1.length - 1, recursiveResult2.length);
            return result;
        } else
        {
            
            return new double[] { points[startIndex][k], points[endIndex][k]};
        }
    }
 
public void setEpsilon(double epsilon)
    {
        if (epsilon <= 0)
        {
            throw new IllegalArgumentException("Epsilon sifirdan buyuk olmali.");
        }
        this.epsilon = epsilon;
    }
 
}
 
 

  
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
 

